// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Playlist playlist
//
// swagger:model playlist
type Playlist struct {

	// artwork
	Artwork *PlaylistArtwork `json:"artwork,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// favorite count
	// Required: true
	FavoriteCount *int64 `json:"favorite_count"`

	// id
	// Required: true
	ID *string `json:"id"`

	// is album
	// Required: true
	IsAlbum *bool `json:"is_album"`

	// is image autogenerated
	// Required: true
	IsImageAutogenerated *bool `json:"is_image_autogenerated"`

	// permalink
	Permalink string `json:"permalink,omitempty"`

	// playlist contents
	// Required: true
	PlaylistContents []*PlaylistAddedTimestamp `json:"playlist_contents"`

	// playlist name
	// Required: true
	PlaylistName *string `json:"playlist_name"`

	// repost count
	// Required: true
	RepostCount *int64 `json:"repost_count"`

	// total play count
	// Required: true
	TotalPlayCount *int64 `json:"total_play_count"`

	// user
	// Required: true
	User *User `json:"user"`
}

// Validate validates this playlist
func (m *Playlist) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFavoriteCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAlbum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsImageAutogenerated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlaylistContents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlaylistName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPlayCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Playlist) validateArtwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Artwork) { // not required
		return nil
	}

	if m.Artwork != nil {
		if err := m.Artwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artwork")
			}
			return err
		}
	}

	return nil
}

func (m *Playlist) validateFavoriteCount(formats strfmt.Registry) error {

	if err := validate.Required("favorite_count", "body", m.FavoriteCount); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateIsAlbum(formats strfmt.Registry) error {

	if err := validate.Required("is_album", "body", m.IsAlbum); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateIsImageAutogenerated(formats strfmt.Registry) error {

	if err := validate.Required("is_image_autogenerated", "body", m.IsImageAutogenerated); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validatePlaylistContents(formats strfmt.Registry) error {

	if err := validate.Required("playlist_contents", "body", m.PlaylistContents); err != nil {
		return err
	}

	for i := 0; i < len(m.PlaylistContents); i++ {
		if swag.IsZero(m.PlaylistContents[i]) { // not required
			continue
		}

		if m.PlaylistContents[i] != nil {
			if err := m.PlaylistContents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("playlist_contents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("playlist_contents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Playlist) validatePlaylistName(formats strfmt.Registry) error {

	if err := validate.Required("playlist_name", "body", m.PlaylistName); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateRepostCount(formats strfmt.Registry) error {

	if err := validate.Required("repost_count", "body", m.RepostCount); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateTotalPlayCount(formats strfmt.Registry) error {

	if err := validate.Required("total_play_count", "body", m.TotalPlayCount); err != nil {
		return err
	}

	return nil
}

func (m *Playlist) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this playlist based on the context it is used
func (m *Playlist) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlaylistContents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Playlist) contextValidateArtwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Artwork != nil {

		if swag.IsZero(m.Artwork) { // not required
			return nil
		}

		if err := m.Artwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artwork")
			}
			return err
		}
	}

	return nil
}

func (m *Playlist) contextValidatePlaylistContents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PlaylistContents); i++ {

		if m.PlaylistContents[i] != nil {

			if swag.IsZero(m.PlaylistContents[i]) { // not required
				return nil
			}

			if err := m.PlaylistContents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("playlist_contents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("playlist_contents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Playlist) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Playlist) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Playlist) UnmarshalBinary(b []byte) error {
	var res Playlist
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
