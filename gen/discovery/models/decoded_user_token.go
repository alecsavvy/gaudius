// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DecodedUserToken decoded user token
//
// swagger:model decoded_user_token
type DecodedUserToken struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// handle
	// Required: true
	Handle *string `json:"handle"`

	// iat
	// Required: true
	Iat *uint32 `json:"iat"`

	// name
	// Required: true
	Name *string `json:"name"`

	// profile picture
	ProfilePicture *ProfilePicture `json:"profilePicture,omitempty"`

	// sub
	// Required: true
	Sub *string `json:"sub"`

	// user Id
	// Required: true
	UserID *string `json:"userId"`

	// verified
	// Required: true
	Verified *bool `json:"verified"`
}

// Validate validates this decoded user token
func (m *DecodedUserToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfilePicture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerified(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DecodedUserToken) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *DecodedUserToken) validateHandle(formats strfmt.Registry) error {

	if err := validate.Required("handle", "body", m.Handle); err != nil {
		return err
	}

	return nil
}

func (m *DecodedUserToken) validateIat(formats strfmt.Registry) error {

	if err := validate.Required("iat", "body", m.Iat); err != nil {
		return err
	}

	return nil
}

func (m *DecodedUserToken) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DecodedUserToken) validateProfilePicture(formats strfmt.Registry) error {
	if swag.IsZero(m.ProfilePicture) { // not required
		return nil
	}

	if m.ProfilePicture != nil {
		if err := m.ProfilePicture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profilePicture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profilePicture")
			}
			return err
		}
	}

	return nil
}

func (m *DecodedUserToken) validateSub(formats strfmt.Registry) error {

	if err := validate.Required("sub", "body", m.Sub); err != nil {
		return err
	}

	return nil
}

func (m *DecodedUserToken) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *DecodedUserToken) validateVerified(formats strfmt.Registry) error {

	if err := validate.Required("verified", "body", m.Verified); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this decoded user token based on the context it is used
func (m *DecodedUserToken) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProfilePicture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DecodedUserToken) contextValidateProfilePicture(ctx context.Context, formats strfmt.Registry) error {

	if m.ProfilePicture != nil {

		if swag.IsZero(m.ProfilePicture) { // not required
			return nil
		}

		if err := m.ProfilePicture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profilePicture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profilePicture")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DecodedUserToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DecodedUserToken) UnmarshalBinary(b []byte) error {
	var res DecodedUserToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
