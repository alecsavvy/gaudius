// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchModel search model
//
// swagger:model search_model
type SearchModel struct {

	// albums
	// Required: true
	Albums []*PlaylistFull `json:"albums"`

	// followed users
	FollowedUsers []*UserFull `json:"followed_users"`

	// playlists
	// Required: true
	Playlists []*PlaylistFull `json:"playlists"`

	// saved albums
	SavedAlbums []*PlaylistFull `json:"saved_albums"`

	// saved playlists
	SavedPlaylists []*PlaylistFull `json:"saved_playlists"`

	// saved tracks
	SavedTracks []*TrackFull `json:"saved_tracks"`

	// tracks
	// Required: true
	Tracks []*TrackFull `json:"tracks"`

	// users
	// Required: true
	Users []*UserFull `json:"users"`
}

// Validate validates this search model
func (m *SearchModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlbums(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowedUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlaylists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSavedAlbums(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSavedPlaylists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSavedTracks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTracks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchModel) validateAlbums(formats strfmt.Registry) error {

	if err := validate.Required("albums", "body", m.Albums); err != nil {
		return err
	}

	for i := 0; i < len(m.Albums); i++ {
		if swag.IsZero(m.Albums[i]) { // not required
			continue
		}

		if m.Albums[i] != nil {
			if err := m.Albums[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("albums" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("albums" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) validateFollowedUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.FollowedUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.FollowedUsers); i++ {
		if swag.IsZero(m.FollowedUsers[i]) { // not required
			continue
		}

		if m.FollowedUsers[i] != nil {
			if err := m.FollowedUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("followed_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("followed_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) validatePlaylists(formats strfmt.Registry) error {

	if err := validate.Required("playlists", "body", m.Playlists); err != nil {
		return err
	}

	for i := 0; i < len(m.Playlists); i++ {
		if swag.IsZero(m.Playlists[i]) { // not required
			continue
		}

		if m.Playlists[i] != nil {
			if err := m.Playlists[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("playlists" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("playlists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) validateSavedAlbums(formats strfmt.Registry) error {
	if swag.IsZero(m.SavedAlbums) { // not required
		return nil
	}

	for i := 0; i < len(m.SavedAlbums); i++ {
		if swag.IsZero(m.SavedAlbums[i]) { // not required
			continue
		}

		if m.SavedAlbums[i] != nil {
			if err := m.SavedAlbums[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("saved_albums" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("saved_albums" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) validateSavedPlaylists(formats strfmt.Registry) error {
	if swag.IsZero(m.SavedPlaylists) { // not required
		return nil
	}

	for i := 0; i < len(m.SavedPlaylists); i++ {
		if swag.IsZero(m.SavedPlaylists[i]) { // not required
			continue
		}

		if m.SavedPlaylists[i] != nil {
			if err := m.SavedPlaylists[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("saved_playlists" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("saved_playlists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) validateSavedTracks(formats strfmt.Registry) error {
	if swag.IsZero(m.SavedTracks) { // not required
		return nil
	}

	for i := 0; i < len(m.SavedTracks); i++ {
		if swag.IsZero(m.SavedTracks[i]) { // not required
			continue
		}

		if m.SavedTracks[i] != nil {
			if err := m.SavedTracks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("saved_tracks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("saved_tracks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) validateTracks(formats strfmt.Registry) error {

	if err := validate.Required("tracks", "body", m.Tracks); err != nil {
		return err
	}

	for i := 0; i < len(m.Tracks); i++ {
		if swag.IsZero(m.Tracks[i]) { // not required
			continue
		}

		if m.Tracks[i] != nil {
			if err := m.Tracks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tracks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tracks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) validateUsers(formats strfmt.Registry) error {

	if err := validate.Required("users", "body", m.Users); err != nil {
		return err
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search model based on the context it is used
func (m *SearchModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlbums(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFollowedUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlaylists(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSavedAlbums(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSavedPlaylists(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSavedTracks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTracks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchModel) contextValidateAlbums(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Albums); i++ {

		if m.Albums[i] != nil {

			if swag.IsZero(m.Albums[i]) { // not required
				return nil
			}

			if err := m.Albums[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("albums" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("albums" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) contextValidateFollowedUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FollowedUsers); i++ {

		if m.FollowedUsers[i] != nil {

			if swag.IsZero(m.FollowedUsers[i]) { // not required
				return nil
			}

			if err := m.FollowedUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("followed_users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("followed_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) contextValidatePlaylists(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Playlists); i++ {

		if m.Playlists[i] != nil {

			if swag.IsZero(m.Playlists[i]) { // not required
				return nil
			}

			if err := m.Playlists[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("playlists" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("playlists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) contextValidateSavedAlbums(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SavedAlbums); i++ {

		if m.SavedAlbums[i] != nil {

			if swag.IsZero(m.SavedAlbums[i]) { // not required
				return nil
			}

			if err := m.SavedAlbums[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("saved_albums" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("saved_albums" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) contextValidateSavedPlaylists(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SavedPlaylists); i++ {

		if m.SavedPlaylists[i] != nil {

			if swag.IsZero(m.SavedPlaylists[i]) { // not required
				return nil
			}

			if err := m.SavedPlaylists[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("saved_playlists" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("saved_playlists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) contextValidateSavedTracks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SavedTracks); i++ {

		if m.SavedTracks[i] != nil {

			if swag.IsZero(m.SavedTracks[i]) { // not required
				return nil
			}

			if err := m.SavedTracks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("saved_tracks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("saved_tracks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) contextValidateTracks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tracks); i++ {

		if m.Tracks[i] != nil {

			if swag.IsZero(m.Tracks[i]) { // not required
				return nil
			}

			if err := m.Tracks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tracks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tracks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchModel) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {

			if swag.IsZero(m.Users[i]) { // not required
				return nil
			}

			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchModel) UnmarshalBinary(b []byte) error {
	var res SearchModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
