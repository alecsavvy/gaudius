// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrackFull track full
//
// swagger:model track_full
type TrackFull struct {

	// ai attribution user id
	AiAttributionUserID int64 `json:"ai_attribution_user_id,omitempty"`

	// artwork
	Artwork *TrackArtwork `json:"artwork,omitempty"`

	// audio upload id
	AudioUploadID string `json:"audio_upload_id,omitempty"`

	// blocknumber
	// Required: true
	Blocknumber *int64 `json:"blocknumber"`

	// cover art
	CoverArt string `json:"cover_art,omitempty"`

	// cover art cids
	CoverArtCids *CoverArt `json:"cover_art_cids,omitempty"`

	// cover art sizes
	CoverArtSizes string `json:"cover_art_sizes,omitempty"`

	// create date
	CreateDate string `json:"create_date,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// credits splits
	CreditsSplits string `json:"credits_splits,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// download
	Download *DownloadMetadata `json:"download,omitempty"`

	// downloadable
	Downloadable bool `json:"downloadable,omitempty"`

	// duration
	// Required: true
	Duration *int64 `json:"duration"`

	// favorite count
	// Required: true
	FavoriteCount *int64 `json:"favorite_count"`

	// field visibility
	FieldVisibility *FieldVisibility `json:"field_visibility,omitempty"`

	// followee favorites
	// Required: true
	FolloweeFavorites []*Favorite `json:"followee_favorites"`

	// followee reposts
	// Required: true
	FolloweeReposts []*Repost `json:"followee_reposts"`

	// genre
	Genre string `json:"genre,omitempty"`

	// has current user reposted
	// Required: true
	HasCurrentUserReposted *bool `json:"has_current_user_reposted"`

	// has current user saved
	// Required: true
	HasCurrentUserSaved *bool `json:"has_current_user_saved"`

	// id
	// Required: true
	ID *string `json:"id"`

	// is available
	IsAvailable bool `json:"is_available,omitempty"`

	// is delete
	IsDelete bool `json:"is_delete,omitempty"`

	// is premium
	IsPremium bool `json:"is_premium,omitempty"`

	// is streamable
	IsStreamable bool `json:"is_streamable,omitempty"`

	// is unlisted
	// Required: true
	IsUnlisted *bool `json:"is_unlisted"`

	// isrc
	Isrc string `json:"isrc,omitempty"`

	// iswc
	Iswc string `json:"iswc,omitempty"`

	// license
	License string `json:"license,omitempty"`

	// mood
	Mood string `json:"mood,omitempty"`

	// permalink
	Permalink string `json:"permalink,omitempty"`

	// play count
	// Required: true
	PlayCount *int64 `json:"play_count"`

	// premium conditions
	PremiumConditions interface{} `json:"premium_conditions,omitempty"`

	// premium content signature
	PremiumContentSignature *PremiumContentSignature `json:"premium_content_signature,omitempty"`

	// preview cid
	PreviewCid string `json:"preview_cid,omitempty"`

	// preview start seconds
	PreviewStartSeconds float64 `json:"preview_start_seconds,omitempty"`

	// release date
	ReleaseDate string `json:"release_date,omitempty"`

	// remix of
	RemixOf *FullRemixParent `json:"remix_of,omitempty"`

	// repost count
	// Required: true
	RepostCount *int64 `json:"repost_count"`

	// route id
	// Required: true
	RouteID *string `json:"route_id"`

	// stem of
	StemOf *StemParent `json:"stem_of,omitempty"`

	// tags
	Tags string `json:"tags,omitempty"`

	// title
	// Required: true
	Title *string `json:"title"`

	// track cid
	TrackCid string `json:"track_cid,omitempty"`

	// track segments
	TrackSegments []*TrackSegment `json:"track_segments"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// user
	// Required: true
	User *UserFull `json:"user"`

	// user id
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this track full
func (m *TrackFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlocknumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoverArtCids(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFavoriteCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldVisibility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolloweeFavorites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolloweeReposts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasCurrentUserReposted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasCurrentUserSaved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsUnlisted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePremiumContentSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemixOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStemOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackSegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrackFull) validateArtwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Artwork) { // not required
		return nil
	}

	if m.Artwork != nil {
		if err := m.Artwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artwork")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) validateBlocknumber(formats strfmt.Registry) error {

	if err := validate.Required("blocknumber", "body", m.Blocknumber); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validateCoverArtCids(formats strfmt.Registry) error {
	if swag.IsZero(m.CoverArtCids) { // not required
		return nil
	}

	if m.CoverArtCids != nil {
		if err := m.CoverArtCids.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cover_art_cids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cover_art_cids")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) validateDownload(formats strfmt.Registry) error {
	if swag.IsZero(m.Download) { // not required
		return nil
	}

	if m.Download != nil {
		if err := m.Download.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("download")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("download")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validateFavoriteCount(formats strfmt.Registry) error {

	if err := validate.Required("favorite_count", "body", m.FavoriteCount); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validateFieldVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.FieldVisibility) { // not required
		return nil
	}

	if m.FieldVisibility != nil {
		if err := m.FieldVisibility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("field_visibility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("field_visibility")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) validateFolloweeFavorites(formats strfmt.Registry) error {

	if err := validate.Required("followee_favorites", "body", m.FolloweeFavorites); err != nil {
		return err
	}

	for i := 0; i < len(m.FolloweeFavorites); i++ {
		if swag.IsZero(m.FolloweeFavorites[i]) { // not required
			continue
		}

		if m.FolloweeFavorites[i] != nil {
			if err := m.FolloweeFavorites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("followee_favorites" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("followee_favorites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrackFull) validateFolloweeReposts(formats strfmt.Registry) error {

	if err := validate.Required("followee_reposts", "body", m.FolloweeReposts); err != nil {
		return err
	}

	for i := 0; i < len(m.FolloweeReposts); i++ {
		if swag.IsZero(m.FolloweeReposts[i]) { // not required
			continue
		}

		if m.FolloweeReposts[i] != nil {
			if err := m.FolloweeReposts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("followee_reposts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("followee_reposts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrackFull) validateHasCurrentUserReposted(formats strfmt.Registry) error {

	if err := validate.Required("has_current_user_reposted", "body", m.HasCurrentUserReposted); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validateHasCurrentUserSaved(formats strfmt.Registry) error {

	if err := validate.Required("has_current_user_saved", "body", m.HasCurrentUserSaved); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validateIsUnlisted(formats strfmt.Registry) error {

	if err := validate.Required("is_unlisted", "body", m.IsUnlisted); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validatePlayCount(formats strfmt.Registry) error {

	if err := validate.Required("play_count", "body", m.PlayCount); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validatePremiumContentSignature(formats strfmt.Registry) error {
	if swag.IsZero(m.PremiumContentSignature) { // not required
		return nil
	}

	if m.PremiumContentSignature != nil {
		if err := m.PremiumContentSignature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("premium_content_signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("premium_content_signature")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) validateRemixOf(formats strfmt.Registry) error {
	if swag.IsZero(m.RemixOf) { // not required
		return nil
	}

	if m.RemixOf != nil {
		if err := m.RemixOf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remix_of")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remix_of")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) validateRepostCount(formats strfmt.Registry) error {

	if err := validate.Required("repost_count", "body", m.RepostCount); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("route_id", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validateStemOf(formats strfmt.Registry) error {
	if swag.IsZero(m.StemOf) { // not required
		return nil
	}

	if m.StemOf != nil {
		if err := m.StemOf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stem_of")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stem_of")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *TrackFull) validateTrackSegments(formats strfmt.Registry) error {
	if swag.IsZero(m.TrackSegments) { // not required
		return nil
	}

	for i := 0; i < len(m.TrackSegments); i++ {
		if swag.IsZero(m.TrackSegments[i]) { // not required
			continue
		}

		if m.TrackSegments[i] != nil {
			if err := m.TrackSegments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("track_segments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("track_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrackFull) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this track full based on the context it is used
func (m *TrackFull) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCoverArtCids(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDownload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFieldVisibility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFolloweeFavorites(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFolloweeReposts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePremiumContentSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemixOf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStemOf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackSegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrackFull) contextValidateArtwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Artwork != nil {

		if swag.IsZero(m.Artwork) { // not required
			return nil
		}

		if err := m.Artwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artwork")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) contextValidateCoverArtCids(ctx context.Context, formats strfmt.Registry) error {

	if m.CoverArtCids != nil {

		if swag.IsZero(m.CoverArtCids) { // not required
			return nil
		}

		if err := m.CoverArtCids.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cover_art_cids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cover_art_cids")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) contextValidateDownload(ctx context.Context, formats strfmt.Registry) error {

	if m.Download != nil {

		if swag.IsZero(m.Download) { // not required
			return nil
		}

		if err := m.Download.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("download")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("download")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) contextValidateFieldVisibility(ctx context.Context, formats strfmt.Registry) error {

	if m.FieldVisibility != nil {

		if swag.IsZero(m.FieldVisibility) { // not required
			return nil
		}

		if err := m.FieldVisibility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("field_visibility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("field_visibility")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) contextValidateFolloweeFavorites(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FolloweeFavorites); i++ {

		if m.FolloweeFavorites[i] != nil {

			if swag.IsZero(m.FolloweeFavorites[i]) { // not required
				return nil
			}

			if err := m.FolloweeFavorites[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("followee_favorites" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("followee_favorites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrackFull) contextValidateFolloweeReposts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FolloweeReposts); i++ {

		if m.FolloweeReposts[i] != nil {

			if swag.IsZero(m.FolloweeReposts[i]) { // not required
				return nil
			}

			if err := m.FolloweeReposts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("followee_reposts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("followee_reposts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrackFull) contextValidatePremiumContentSignature(ctx context.Context, formats strfmt.Registry) error {

	if m.PremiumContentSignature != nil {

		if swag.IsZero(m.PremiumContentSignature) { // not required
			return nil
		}

		if err := m.PremiumContentSignature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("premium_content_signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("premium_content_signature")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) contextValidateRemixOf(ctx context.Context, formats strfmt.Registry) error {

	if m.RemixOf != nil {

		if swag.IsZero(m.RemixOf) { // not required
			return nil
		}

		if err := m.RemixOf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remix_of")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remix_of")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) contextValidateStemOf(ctx context.Context, formats strfmt.Registry) error {

	if m.StemOf != nil {

		if swag.IsZero(m.StemOf) { // not required
			return nil
		}

		if err := m.StemOf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stem_of")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stem_of")
			}
			return err
		}
	}

	return nil
}

func (m *TrackFull) contextValidateTrackSegments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TrackSegments); i++ {

		if m.TrackSegments[i] != nil {

			if swag.IsZero(m.TrackSegments[i]) { // not required
				return nil
			}

			if err := m.TrackSegments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("track_segments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("track_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TrackFull) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrackFull) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrackFull) UnmarshalBinary(b []byte) error {
	var res TrackFull
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
