// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PurchasesResponse purchases response
//
// swagger:model purchases_response
type PurchasesResponse struct {
	dataField []Purchase

	// latest chain block
	// Required: true
	LatestChainBlock *int64 `json:"latest_chain_block"`

	// latest chain slot plays
	// Required: true
	LatestChainSlotPlays *int64 `json:"latest_chain_slot_plays"`

	// latest indexed block
	// Required: true
	LatestIndexedBlock *int64 `json:"latest_indexed_block"`

	// latest indexed slot plays
	// Required: true
	LatestIndexedSlotPlays *int64 `json:"latest_indexed_slot_plays"`

	// signature
	// Required: true
	Signature *string `json:"signature"`

	// timestamp
	// Required: true
	Timestamp *string `json:"timestamp"`

	// version
	// Required: true
	Version *VersionMetadata `json:"version"`
}

// Data gets the data of this base type
func (m *PurchasesResponse) Data() []Purchase {
	return m.dataField
}

// SetData sets the data of this base type
func (m *PurchasesResponse) SetData(val []Purchase) {
	m.dataField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *PurchasesResponse) UnmarshalJSON(raw []byte) error {
	var data struct {
		Data json.RawMessage `json:"data"`

		LatestChainBlock *int64 `json:"latest_chain_block"`

		LatestChainSlotPlays *int64 `json:"latest_chain_slot_plays"`

		LatestIndexedBlock *int64 `json:"latest_indexed_block"`

		LatestIndexedSlotPlays *int64 `json:"latest_indexed_slot_plays"`

		Signature *string `json:"signature"`

		Timestamp *string `json:"timestamp"`

		Version *VersionMetadata `json:"version"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propData []Purchase
	if string(data.Data) != "null" {
		data, err := UnmarshalPurchaseSlice(bytes.NewBuffer(data.Data), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propData = data
	}

	var result PurchasesResponse

	// data
	result.dataField = propData

	// latest_chain_block
	result.LatestChainBlock = data.LatestChainBlock

	// latest_chain_slot_plays
	result.LatestChainSlotPlays = data.LatestChainSlotPlays

	// latest_indexed_block
	result.LatestIndexedBlock = data.LatestIndexedBlock

	// latest_indexed_slot_plays
	result.LatestIndexedSlotPlays = data.LatestIndexedSlotPlays

	// signature
	result.Signature = data.Signature

	// timestamp
	result.Timestamp = data.Timestamp

	// version
	result.Version = data.Version

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m PurchasesResponse) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		LatestChainBlock *int64 `json:"latest_chain_block"`

		LatestChainSlotPlays *int64 `json:"latest_chain_slot_plays"`

		LatestIndexedBlock *int64 `json:"latest_indexed_block"`

		LatestIndexedSlotPlays *int64 `json:"latest_indexed_slot_plays"`

		Signature *string `json:"signature"`

		Timestamp *string `json:"timestamp"`

		Version *VersionMetadata `json:"version"`
	}{

		LatestChainBlock: m.LatestChainBlock,

		LatestChainSlotPlays: m.LatestChainSlotPlays,

		LatestIndexedBlock: m.LatestIndexedBlock,

		LatestIndexedSlotPlays: m.LatestIndexedSlotPlays,

		Signature: m.Signature,

		Timestamp: m.Timestamp,

		Version: m.Version,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Data []Purchase `json:"data"`
	}{

		Data: m.dataField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this purchases response
func (m *PurchasesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestChainBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestChainSlotPlays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestIndexedBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestIndexedSlotPlays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchasesResponse) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data()) { // not required
		return nil
	}

	for i := 0; i < len(m.Data()); i++ {

		if err := m.dataField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PurchasesResponse) validateLatestChainBlock(formats strfmt.Registry) error {

	if err := validate.Required("latest_chain_block", "body", m.LatestChainBlock); err != nil {
		return err
	}

	return nil
}

func (m *PurchasesResponse) validateLatestChainSlotPlays(formats strfmt.Registry) error {

	if err := validate.Required("latest_chain_slot_plays", "body", m.LatestChainSlotPlays); err != nil {
		return err
	}

	return nil
}

func (m *PurchasesResponse) validateLatestIndexedBlock(formats strfmt.Registry) error {

	if err := validate.Required("latest_indexed_block", "body", m.LatestIndexedBlock); err != nil {
		return err
	}

	return nil
}

func (m *PurchasesResponse) validateLatestIndexedSlotPlays(formats strfmt.Registry) error {

	if err := validate.Required("latest_indexed_slot_plays", "body", m.LatestIndexedSlotPlays); err != nil {
		return err
	}

	return nil
}

func (m *PurchasesResponse) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

func (m *PurchasesResponse) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *PurchasesResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this purchases response based on the context it is used
func (m *PurchasesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchasesResponse) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data()); i++ {

		if swag.IsZero(m.dataField[i]) { // not required
			return nil
		}

		if err := m.dataField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PurchasesResponse) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.Version != nil {

		if err := m.Version.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PurchasesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchasesResponse) UnmarshalBinary(b []byte) error {
	var res PurchasesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
