// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransactionDetails transaction details
//
// swagger:discriminator transaction_details transaction_type
type TransactionDetails interface {
	runtime.Validatable
	runtime.ContextValidatable

	// balance
	// Required: true
	Balance() *string
	SetBalance(*string)

	// change
	// Required: true
	Change() *string
	SetChange(*string)

	// metadata
	// Required: true
	Metadata() interface{}
	SetMetadata(interface{})

	// method
	// Required: true
	Method() *string
	SetMethod(*string)

	// signature
	// Required: true
	Signature() *string
	SetSignature(*string)

	// transaction date
	// Required: true
	TransactionDate() *string
	SetTransactionDate(*string)

	// transaction type
	// Required: true
	TransactionType() string
	SetTransactionType(string)

	// user bank
	// Required: true
	UserBank() *string
	SetUserBank(*string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type transactionDetails struct {
	balanceField *string

	changeField *string

	metadataField interface{}

	methodField *string

	signatureField *string

	transactionDateField *string

	transactionTypeField string

	userBankField *string
}

// Balance gets the balance of this polymorphic type
func (m *transactionDetails) Balance() *string {
	return m.balanceField
}

// SetBalance sets the balance of this polymorphic type
func (m *transactionDetails) SetBalance(val *string) {
	m.balanceField = val
}

// Change gets the change of this polymorphic type
func (m *transactionDetails) Change() *string {
	return m.changeField
}

// SetChange sets the change of this polymorphic type
func (m *transactionDetails) SetChange(val *string) {
	m.changeField = val
}

// Metadata gets the metadata of this polymorphic type
func (m *transactionDetails) Metadata() interface{} {
	return m.metadataField
}

// SetMetadata sets the metadata of this polymorphic type
func (m *transactionDetails) SetMetadata(val interface{}) {
	m.metadataField = val
}

// Method gets the method of this polymorphic type
func (m *transactionDetails) Method() *string {
	return m.methodField
}

// SetMethod sets the method of this polymorphic type
func (m *transactionDetails) SetMethod(val *string) {
	m.methodField = val
}

// Signature gets the signature of this polymorphic type
func (m *transactionDetails) Signature() *string {
	return m.signatureField
}

// SetSignature sets the signature of this polymorphic type
func (m *transactionDetails) SetSignature(val *string) {
	m.signatureField = val
}

// TransactionDate gets the transaction date of this polymorphic type
func (m *transactionDetails) TransactionDate() *string {
	return m.transactionDateField
}

// SetTransactionDate sets the transaction date of this polymorphic type
func (m *transactionDetails) SetTransactionDate(val *string) {
	m.transactionDateField = val
}

// TransactionType gets the transaction type of this polymorphic type
func (m *transactionDetails) TransactionType() string {
	return "transaction_details"
}

// SetTransactionType sets the transaction type of this polymorphic type
func (m *transactionDetails) SetTransactionType(val string) {
}

// UserBank gets the user bank of this polymorphic type
func (m *transactionDetails) UserBank() *string {
	return m.userBankField
}

// SetUserBank sets the user bank of this polymorphic type
func (m *transactionDetails) SetUserBank(val *string) {
	m.userBankField = val
}

// UnmarshalTransactionDetailsSlice unmarshals polymorphic slices of TransactionDetails
func UnmarshalTransactionDetailsSlice(reader io.Reader, consumer runtime.Consumer) ([]TransactionDetails, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []TransactionDetails
	for _, element := range elements {
		obj, err := unmarshalTransactionDetails(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalTransactionDetails unmarshals polymorphic TransactionDetails
func UnmarshalTransactionDetails(reader io.Reader, consumer runtime.Consumer) (TransactionDetails, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalTransactionDetails(data, consumer)
}

func unmarshalTransactionDetails(data []byte, consumer runtime.Consumer) (TransactionDetails, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the transaction_type property.
	var getType struct {
		TransactionType string `json:"transaction_type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("transaction_type", "body", getType.TransactionType); err != nil {
		return nil, err
	}

	// The value of transaction_type is used to determine which type to create and unmarshal the data into
	switch getType.TransactionType {
	case "transaction_details":
		var result transactionDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid transaction_type value: %q", getType.TransactionType)
}

// Validate validates this transaction details
func (m *transactionDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserBank(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *transactionDetails) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance()); err != nil {
		return err
	}

	return nil
}

func (m *transactionDetails) validateChange(formats strfmt.Registry) error {

	if err := validate.Required("change", "body", m.Change()); err != nil {
		return err
	}

	return nil
}

func (m *transactionDetails) validateMetadata(formats strfmt.Registry) error {

	// if m.Metadata == nil {
	// 	return errors.Required("metadata", "body", nil)
	// }

	return nil
}

func (m *transactionDetails) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method()); err != nil {
		return err
	}

	return nil
}

func (m *transactionDetails) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature()); err != nil {
		return err
	}

	return nil
}

func (m *transactionDetails) validateTransactionDate(formats strfmt.Registry) error {

	if err := validate.Required("transaction_date", "body", m.TransactionDate()); err != nil {
		return err
	}

	return nil
}

func (m *transactionDetails) validateUserBank(formats strfmt.Registry) error {

	if err := validate.Required("user_bank", "body", m.UserBank()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this transaction details based on context it is used
func (m *transactionDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
