// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserReplicaSet user replica set
//
// swagger:model user_replica_set
type UserReplicaSet struct {

	// primary
	Primary string `json:"primary,omitempty"`

	// primary sp ID
	PrimarySpID int64 `json:"primarySpID,omitempty"`

	// secondary1
	Secondary1 string `json:"secondary1,omitempty"`

	// secondary1 sp ID
	Secondary1SpID int64 `json:"secondary1SpID,omitempty"`

	// secondary2
	Secondary2 string `json:"secondary2,omitempty"`

	// secondary2 sp ID
	Secondary2SpID int64 `json:"secondary2SpID,omitempty"`

	// user id
	// Required: true
	UserID *int64 `json:"user_id"`

	// wallet
	// Required: true
	Wallet *string `json:"wallet"`
}

// Validate validates this user replica set
func (m *UserReplicaSet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWallet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserReplicaSet) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *UserReplicaSet) validateWallet(formats strfmt.Registry) error {

	if err := validate.Required("wallet", "body", m.Wallet); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user replica set based on context it is used
func (m *UserReplicaSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserReplicaSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserReplicaSet) UnmarshalBinary(b []byte) error {
	var res UserReplicaSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
