// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FullRemix full remix
//
// swagger:model full_remix
type FullRemix struct {

	// has remix author reposted
	// Required: true
	HasRemixAuthorReposted *bool `json:"has_remix_author_reposted"`

	// has remix author saved
	// Required: true
	HasRemixAuthorSaved *bool `json:"has_remix_author_saved"`

	// parent track id
	// Required: true
	ParentTrackID *string `json:"parent_track_id"`

	// user
	// Required: true
	User *UserFull `json:"user"`
}

// Validate validates this full remix
func (m *FullRemix) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHasRemixAuthorReposted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasRemixAuthorSaved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentTrackID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FullRemix) validateHasRemixAuthorReposted(formats strfmt.Registry) error {

	if err := validate.Required("has_remix_author_reposted", "body", m.HasRemixAuthorReposted); err != nil {
		return err
	}

	return nil
}

func (m *FullRemix) validateHasRemixAuthorSaved(formats strfmt.Registry) error {

	if err := validate.Required("has_remix_author_saved", "body", m.HasRemixAuthorSaved); err != nil {
		return err
	}

	return nil
}

func (m *FullRemix) validateParentTrackID(formats strfmt.Registry) error {

	if err := validate.Required("parent_track_id", "body", m.ParentTrackID); err != nil {
		return err
	}

	return nil
}

func (m *FullRemix) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this full remix based on the context it is used
func (m *FullRemix) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FullRemix) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FullRemix) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FullRemix) UnmarshalBinary(b []byte) error {
	var res FullRemix
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
