// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FullTip full tip
//
// swagger:model full_tip
type FullTip struct {

	// amount
	// Required: true
	Amount *string `json:"amount"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// followee supporters
	// Required: true
	FolloweeSupporters []*SupporterReference `json:"followee_supporters"`

	// receiver
	// Required: true
	Receiver *UserFull `json:"receiver"`

	// sender
	// Required: true
	Sender *UserFull `json:"sender"`

	// slot
	// Required: true
	Slot *int64 `json:"slot"`

	// tx signature
	// Required: true
	TxSignature *string `json:"tx_signature"`
}

// Validate validates this full tip
func (m *FullTip) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolloweeSupporters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FullTip) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *FullTip) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *FullTip) validateFolloweeSupporters(formats strfmt.Registry) error {

	if err := validate.Required("followee_supporters", "body", m.FolloweeSupporters); err != nil {
		return err
	}

	for i := 0; i < len(m.FolloweeSupporters); i++ {
		if swag.IsZero(m.FolloweeSupporters[i]) { // not required
			continue
		}

		if m.FolloweeSupporters[i] != nil {
			if err := m.FolloweeSupporters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("followee_supporters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("followee_supporters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FullTip) validateReceiver(formats strfmt.Registry) error {

	if err := validate.Required("receiver", "body", m.Receiver); err != nil {
		return err
	}

	if m.Receiver != nil {
		if err := m.Receiver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receiver")
			}
			return err
		}
	}

	return nil
}

func (m *FullTip) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", m.Sender); err != nil {
		return err
	}

	if m.Sender != nil {
		if err := m.Sender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sender")
			}
			return err
		}
	}

	return nil
}

func (m *FullTip) validateSlot(formats strfmt.Registry) error {

	if err := validate.Required("slot", "body", m.Slot); err != nil {
		return err
	}

	return nil
}

func (m *FullTip) validateTxSignature(formats strfmt.Registry) error {

	if err := validate.Required("tx_signature", "body", m.TxSignature); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this full tip based on the context it is used
func (m *FullTip) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFolloweeSupporters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceiver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSender(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FullTip) contextValidateFolloweeSupporters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FolloweeSupporters); i++ {

		if m.FolloweeSupporters[i] != nil {

			if swag.IsZero(m.FolloweeSupporters[i]) { // not required
				return nil
			}

			if err := m.FolloweeSupporters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("followee_supporters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("followee_supporters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FullTip) contextValidateReceiver(ctx context.Context, formats strfmt.Registry) error {

	if m.Receiver != nil {

		if err := m.Receiver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receiver")
			}
			return err
		}
	}

	return nil
}

func (m *FullTip) contextValidateSender(ctx context.Context, formats strfmt.Registry) error {

	if m.Sender != nil {

		if err := m.Sender.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sender")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FullTip) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FullTip) UnmarshalBinary(b []byte) error {
	var res FullTip
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
